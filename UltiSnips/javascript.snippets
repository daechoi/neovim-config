
snippet f "Basic function" !w
function${1}(${2}) {
${3}
}
endsnippet

snippet r "return" !w
return ${1}
endsnippet

snippet I "return" !w
var I = require("immutable");
endsnippet

snippet _ "return" !w
var _ = require("lodash");
endsnippet

snippet a "arguments" !w
arguments${1}
endsnippet

snippet s "var self" !w
var self = this;
endsnippet

snippet p "Promise" !w
new Promise(function(resolve, reject){
${1}
});
endsnippet

snippet j "JSON.stringify()" !w
JSON.stringify(${1})
endsnippet

snippet bp "break point" !w
debugger;
endsnippet

snippet f, "Basic function with comma" !w
function${3}(${1}) {
${2}
},
endsnippet

snippet f; "Basic function with semicolon" !w
function${3}(${1}) {
${2}
};
endsnippet

snippet c "Callback" !w
function(${1:err}) {
${2}
})
endsnippet

snippet c; "Callback with semicolon" !w
function(${1:err}) {
${2}
});
endsnippet

snippet iferr "if error" !b
if (err) {
${1}
}
endsnippet

snippet rerr "return if error" !b
if (err) return ${1:cb}(err);
endsnippet

snippet d "console.log()" !b
debug(${1});
endsnippet

snippet { "React JSX comment" !w
{/* ${1} */}
endsnippet

snippet l "console.log()" !b
console.log(${1});
endsnippet

snippet i "console.info()" !b
console.info(${1});
endsnippet

snippet w "console.warn()" !b
console.warn(${1});
endsnippet

snippet e "console.error()" !b
console.error(${1});
endsnippet

snippet b "require(bluebird)" !b
var Promise = require("bluebird");
endsnippet

snippet m "module.exports" !b
module.exports = 
endsnippet

snippet i "Mocha it" !bw
it("${1}", function() {
${2}
});
endsnippet

snippet desc "Mocha describe" !b
describe("${1}", function() {
${2}
});
endsnippet

snippet mocha "Mocha globals" !b
/*global it, describe, before, beforeEach, after, afterEach */
endsnippet

snippet ifmain "if (require.main === module)" !b
if (require.main === module) {
${1}
}
endsnippet

snippet bs "Super (Backbone)" !b
${1:Backbone.Model}.prototype.${2:constructor}.apply(this, arguments);
endsnippet
snippet super "Super (Backbone)" !b
${1:Backbone.Model}.prototype.${2:constructor}.apply(this, arguments);
endsnippet

snippet exit "process.exit(0);" !b
process.exit(${1:0});
endsnippet

snippet jsx "Add JSX comment" !b
/** @jsx React.DOM */
endsnippet

snippet react "Create React Component" !b
/**
 * @namespace components
 * @class ${1/(.*)/$1/}
 * @constructor
 * @param {Object} props
 */
var ${1/(.*)/$1/} = React.createClass({
    render: function() {
        return (
            <div className="${1/(.*)/$1/}">${2}</div>
        );
    }
});

module.exports = ${1:Component};
endsnippet

snippet me "Create method with docstring" !b
/**
 * ${3:TODO}
 *
 * @method ${1/(.*)/$1/}
 */
${1:method}: function(){
${2}
},
endsnippet

snippet ifnew "Create new instances without new" !b
if (!(this instanceof ${1:Klass})) return new ${1/(.*)/$1/}(${2:opts});
endsnippet

snippet use "use strict" !b
"use strict";
endsnippet

snippet re "require(module)" !b
var ${1:React} = require("$2${1/(.*)/$1/}");
endsnippet

snippet remove "Remove element from array" !b
var ${3:i} = ${1:array}.indexOf(${2:value});
if (${3/(.*)/$1/} > -1) ${1/(.*)/$1/}.splice(${3/(.*)/$1/}, 1);
endsnippet


snippet ** "yuidoc comment" !b
/**
 * @${2}
 */
endsnippet

snippet t "then after a promise" !w
.then(function(${1:val}) {
${2}
})${3}
endsnippet
